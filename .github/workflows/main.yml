name: JMeter CI/CD Workflow

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main

jobs:
  jmeter-tests:
    runs-on: ubuntu-latest
    outputs:
      timestamp: ${{ steps.set-timestamp.outputs.timestamp }}

    steps:
      # ✅ Set timestamp for report naming
      - name: Set timestamp
        id: set-timestamp
        run: echo "timestamp=$(date +'%Y-%m-%d_%H-%M-%S')" >> $GITHUB_OUTPUT

      # ✅ Checkout code
      - name: Checkout repository
        uses: actions/checkout@v4

      # ✅ Install JMeter
      - name: Install JMeter
        run: |
          sudo apt update
          sudo apt install -y openjdk-11-jre
          wget https://archive.apache.org/dist/jmeter/binaries/apache-jmeter-5.6.2.tgz
          tar -xvzf apache-jmeter-5.6.2.tgz
          echo "JMETER_HOME=$(pwd)/apache-jmeter-5.6.2" >> $GITHUB_ENV
          echo "$(pwd)/apache-jmeter-5.6.2/bin" >> $GITHUB_PATH

      # ✅ Reload environment variables
      - name: Load environment variables
        run: source $GITHUB_ENV

      # ✅ Verify JMeter Installation
      - name: Verify JMeter Installation
        run: jmeter --version

      # ✅ Create report directories
      - name: Create report directories
        run: |
          mkdir -p ./jmeter-pages/reports
          mkdir -p ./jmeter-tests/results
          mkdir -p ./jmeter-history

      # ✅ Run JMeter Tests
      - name: Run JMeter Tests
        run: |
          jmeter -n \
            -t ./C_1.jmx \
            -l ./jmeter-tests/results/results.jtl \
            -e -o ./jmeter-pages/reports \
            -Jthreads=100 -Jrampup=10 -Jduration=60 -f

      # ✅ Inject Base URL in JMeter Report
      - name: Inject Base URL
        run: |
          sed -i 's#<head>#<head><base href="/chaabi-jmeter-tests/jmeter-pages/reports/">#g' ./jmeter-pages/reports/index.html

      # ✅ Display Test Summary
      - name: Display Test Summary
        run: |
          echo "Test Summary:"
          grep "summary =" ./jmeter-tests/results/results.jtl || echo "No summary found"

      # ✅ Save Historical Report Copy
      - name: Create Historical Report Copy
        run: |
          TIMESTAMP=${{ steps.set-timestamp.outputs.timestamp }}
          COMMIT_ID=$(git rev-parse --short HEAD)
          HISTORY_DIR="./jmeter-history/report_${TIMESTAMP}_${COMMIT_ID}"
          
          # Copy report files to history directory
          mkdir -p $HISTORY_DIR
          cp -r ./jmeter-pages/reports/* $HISTORY_DIR/
          cp ./jmeter-tests/results/results.jtl $HISTORY_DIR/
          
          # Create simple metadata file
          echo "Timestamp: ${TIMESTAMP}" > $HISTORY_DIR/metadata.txt
          echo "Commit: ${COMMIT_ID}" >> $HISTORY_DIR/metadata.txt
          echo "Branch: ${GITHUB_REF_NAME}" >> $HISTORY_DIR/metadata.txt
          
          # Archive for storage efficiency
          tar -czf "${HISTORY_DIR}.tar.gz" $HISTORY_DIR
          rm -rf $HISTORY_DIR

      # ✅ Upload Historical Reports as Artifacts
      - name: Upload Historical Reports
        uses: actions/upload-artifact@v4
        with:
          name: JMeter-Historical-Reports
          path: ./jmeter-history/

      # ✅ Upload Current Reports as Artifacts
      - name: Upload Reports
        uses: actions/upload-artifact@v4
        with:
          name: JMeter-Reports
          path: ./jmeter-pages/reports

  # ✅ Deploy to GitHub Pages with History
  deploy:
    needs: jmeter-tests
    runs-on: ubuntu-latest

    steps:
      # ✅ Checkout repository with history
      - name: Checkout repository with history
        uses: actions/checkout@v4
        with:
          ref: gh-pages
          fetch-depth: 0
          token: ${{ secrets.GITHUB_TOKEN }}
          
      # ✅ Create history directories if they don't exist
      - name: Create directories
        run: |
          mkdir -p ./history
          mkdir -p ./dashboard
          mkdir -p ./current
          mkdir -p ./historical-reports

      # ✅ Download historical reports artifact
      - name: Download historical reports artifact
        uses: actions/download-artifact@v4
        with:
          name: JMeter-Historical-Reports
          path: ./downloaded-history

      # ✅ Download current reports artifact
      - name: Download current reports artifact
        uses: actions/download-artifact@v4
        with:
          name: JMeter-Reports
          path: ./current

      # ✅ Extract and organize the latest report for direct viewing
      - name: Extract latest historical report
        run: |
          # Move all history archives to the history directory
          mv ./downloaded-history/* ./history/ 2>/dev/null || true
          
          # Find the most recent report archive
          LATEST_ARCHIVE=$(ls -t ./history/*.tar.gz 2>/dev/null | head -1 || echo "")
          
          # Extract it for direct viewing if it exists
          if [ -n "$LATEST_ARCHIVE" ]; then
            echo "Extracting latest report for direct viewing: $LATEST_ARCHIVE"
            mkdir -p ./historical-reports/latest
            tar -xzf "$LATEST_ARCHIVE" -C ./historical-reports/
            
            # Create a redirect for easier access
            cat > ./historical-reports/index.html << EOF
<!DOCTYPE html>
<html>
<head>
  <meta http-equiv="refresh" content="0; url=./$(basename "$LATEST_ARCHIVE" .tar.gz)/index.html">
  <title>Redirecting to Latest Report</title>
</head>
<body>
  <p>Redirecting to the latest historical report...</p>
  <p>If you are not redirected automatically, <a href="./$(basename "$LATEST_ARCHIVE" .tar.gz)/index.html">click here</a>.</p>
</body>
</html>
EOF
          fi

      # ✅ Process and organize the history reports
      - name: Process historical reports
        run: |
          TIMESTAMP="${{ needs.jmeter-tests.outputs.timestamp }}"
          
          # Generate report history index
          echo "<!DOCTYPE html>" > ./dashboard/index.html
          echo "<html lang='en'>" >> ./dashboard/index.html
          echo "<head>" >> ./dashboard/index.html
          echo "  <meta charset='UTF-8'>" >> ./dashboard/index.html
          echo "  <meta name='viewport' content='width=device-width, initial-scale=1.0'>" >> ./dashboard/index.html
          echo "  <title>JMeter Test History Dashboard</title>" >> ./dashboard/index.html
          echo "  <style>" >> ./dashboard/index.html
          echo "    body { font-family: Arial, sans-serif; margin: 20px; }" >> ./dashboard/index.html
          echo "    table { border-collapse: collapse; width: 100%; }" >> ./dashboard/index.html
          echo "    th, td { border: 1px solid #ddd; padding: 8px; text-align: left; }" >> ./dashboard/index.html
          echo "    th { background-color: #f2f2f2; }" >> ./dashboard/index.html
          echo "    tr:hover {background-color: #f5f5f5;}" >> ./dashboard/index.html
          echo "    .current { background-color: #e6ffe6; }" >> ./dashboard/index.html
          echo "    .nav-links { margin: 20px 0; padding: 10px; background-color: #f8f9fa; border-radius: 5px; }" >> ./dashboard/index.html
          echo "    .nav-links a { margin-right: 20px; text-decoration: none; color: #0366d6; }" >> ./dashboard/index.html
          echo "    .nav-links a:hover { text-decoration: underline; }" >> ./dashboard/index.html
          echo "  </style>" >> ./dashboard/index.html
          echo "</head>" >> ./dashboard/index.html
          echo "<body>" >> ./dashboard/index.html
          echo "  <h1>JMeter Test History Dashboard</h1>" >> ./dashboard/index.html
          echo "  <p>Last updated: $(date)</p>" >> ./dashboard/index.html
          echo "  <div class='nav-links'>" >> ./dashboard/index.html
          echo "    <a href='../current/index.html'>Current Test Report</a>" >> ./dashboard/index.html
          echo "    <a href='../historical-reports/index.html'>Latest Historical Report</a>" >> ./dashboard/index.html
          echo "    <a href='trend_chart.html'>Performance Trend Chart</a>" >> ./dashboard/index.html
          echo "  </div>" >> ./dashboard/index.html
          echo "  <h2>Test Reports History</h2>" >> ./dashboard/index.html
          echo "  <table>" >> ./dashboard/index.html
          echo "    <tr>" >> ./dashboard/index.html
          echo "      <th>Date & Time</th>" >> ./dashboard/index.html
          echo "      <th>Commit ID</th>" >> ./dashboard/index.html
          echo "      <th>Actions</th>" >> ./dashboard/index.html
          echo "    </tr>" >> ./dashboard/index.html
          
          # List history reports (newest first)
          ls -t ./history/*.tar.gz 2>/dev/null | while read report; do
            filename=$(basename "$report" .tar.gz)
            timestamp=$(echo $filename | cut -d'_' -f2-3)
            commit=$(echo $filename | cut -d'_' -f4)
            
            # Store report on GitHub Pages
            if [ -f "$report" ] && [ ! -d "./historical-reports/$filename" ]; then
              mkdir -p "./historical-reports/$filename"
              tar -xzf "$report" -C "./historical-reports/"
            fi
            
            # Extract data for display
            echo "    <tr>" >> ./dashboard/index.html
            echo "      <td>$timestamp</td>" >> ./dashboard/index.html
            echo "      <td>$commit</td>" >> ./dashboard/index.html
            echo "      <td><a href='../historical-reports/$filename/index.html'>View Report</a></td>" >> ./dashboard/index.html
            echo "    </tr>" >> ./dashboard/index.html
          done
          
          echo "  </table>" >> ./dashboard/index.html
          
          # Add comparison tool
          echo "  <h2>Compare Test Reports</h2>" >> ./dashboard/index.html
          echo "  <div>" >> ./dashboard/index.html
          echo "    <p>Select two reports to compare:</p>" >> ./dashboard/index.html
          echo "    <form action='javascript:void(0);' onsubmit='compareReports()'>" >> ./dashboard/index.html
          echo "      <label for='report1'>Report 1:</label>" >> ./dashboard/index.html
          echo "      <select id='report1'>" >> ./dashboard/index.html
          
          # Add options for each report
          ls -t ./history/*.tar.gz 2>/dev/null | while read report; do
            filename=$(basename "$report" .tar.gz)
            timestamp=$(echo $filename | cut -d'_' -f2-3)
            commit=$(echo $filename | cut -d'_' -f4)
            echo "        <option value='$filename'>$timestamp ($commit)</option>" >> ./dashboard/index.html
          done
          
          echo "      </select><br><br>" >> ./dashboard/index.html
          echo "      <label for='report2'>Report 2:</label>" >> ./dashboard/index.html
          echo "      <select id='report2'>" >> ./dashboard/index.html
          
          # Add options for each report again
          ls -t ./history/*.tar.gz 2>/dev/null | while read report; do
            filename=$(basename "$report" .tar.gz)
            timestamp=$(echo $filename | cut -d'_' -f2-3)
            commit=$(echo $filename | cut -d'_' -f4)
            echo "        <option value='$filename'>$timestamp ($commit)</option>" >> ./dashboard/index.html
          done
          
          echo "      </select><br><br>" >> ./dashboard/index.html
          echo "      <button type='submit'>Compare Reports</button>" >> ./dashboard/index.html
          echo "    </form>" >> ./dashboard/index.html
          echo "  </div>" >> ./dashboard/index.html
          
          # Add JavaScript for the comparison functionality
          echo "  <script>" >> ./dashboard/index.html
          echo "    function compareReports() {" >> ./dashboard/index.html
          echo "      const report1 = document.getElementById('report1').value;" >> ./dashboard/index.html
          echo "      const report2 = document.getElementById('report2').value;" >> ./dashboard/index.html
          echo "      " >> ./dashboard/index.html
          echo "      if (report1 === report2) {" >> ./dashboard/index.html
          echo "        alert('Please select two different reports to compare.');" >> ./dashboard/index.html
          echo "        return;" >> ./dashboard/index.html
          echo "      }" >> ./dashboard/index.html
          echo "      " >> ./dashboard/index.html
          echo "      // Create a simple comparison view by opening reports side by side" >> ./dashboard/index.html
          echo "      const compareUrl = '../compare.html?report1=' + report1 + '&report2=' + report2;" >> ./dashboard/index.html
          echo "      window.location.href = compareUrl;" >> ./dashboard/index.html
          echo "    }" >> ./dashboard/index.html
          echo "  </script>" >> ./dashboard/index.html
          echo "</body>" >> ./dashboard/index.html
          echo "</html>" >> ./dashboard/index.html
          
          # Create a simple comparison page
          cat > ./compare.html << 'EOL'
          <!DOCTYPE html>
          <html lang="en">
          <head>
            <meta charset="UTF-8">
            <meta name="viewport" content="width=device-width, initial-scale=1.0">
            <title>JMeter Reports Comparison</title>
            <style>
              body { font-family: Arial, sans-serif; margin: 0; padding: 0; }
              .header { padding: 10px 20px; background-color: #f8f9fa; border-bottom: 1px solid #ddd; }
              .comparison-container { display: flex; height: calc(100vh - 60px); }
              .report-frame { flex: 1; border: none; height: 100%; }
              .separator { width: 4px; background-color: #ddd; cursor: col-resize; }
            </style>
          </head>
          <body>
            <div class="header">
              <h2>JMeter Reports Comparison</h2>
              <a href="./dashboard/index.html">← Back to Dashboard</a>
            </div>
            <div class="comparison-container" id="container">
              <iframe class="report-frame" id="report1Frame"></iframe>
              <div class="separator" id="separator"></div>
              <iframe class="report-frame" id="report2Frame"></iframe>
            </div>
            <script>
              // Get report names from URL
              const params = new URLSearchParams(window.location.search);
              const report1 = params.get('report1');
              const report2 = params.get('report2');
              
              // Set iframe sources
              document.getElementById('report1Frame').src = './historical-reports/' + report1 + '/index.html';
              document.getElementById('report2Frame').src = './historical-reports/' + report2 + '/index.html';
              
              // Update title
              document.title = 'Compare: ' + report1 + ' vs ' + report2;
              
              // Set up resizable panels
              const separator = document.getElementById('separator');
              let isResizing = false;
              
              separator.addEventListener('mousedown', function(e) {
                isResizing = true;
              });
              
              document.addEventListener('mousemove', function(e) {
                if (!isResizing) return;
                
                const container = document.getElementById('container');
                const containerRect = container.getBoundingClientRect();
                const percentage = ((e.clientX - containerRect.left) / containerRect.width) * 100;
                
                // Limit the minimum width of each panel
                if (percentage > 10 && percentage < 90) {
                  document.getElementById('report1Frame').style.width = percentage + '%';
                  document.getElementById('report2Frame').style.width = (100 - percentage) + '%';
                }
              });
              
              document.addEventListener('mouseup', function() {
                isResizing = false;
              });
            </script>
          </body>
          </html>
EOL

      # ✅ Checkout main repository for scripts
      - name: Checkout main repository
        uses: actions/checkout@v4
        with:
          path: temp-checkout
          ref: main
      
      # ✅ Setup Python for trend charts
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.10'
      
      # ✅ Generate trend charts
      - name: Generate trend charts
        run: |
          # Copy script to working directory
          cp temp-checkout/scripts/generate_trend_chart.py ./
          
          # Install required Python packages
          pip install matplotlib numpy pandas
          
          # Run the script to generate trend chart
          python generate_trend_chart.py --history-dir ./history --output-dir ./dashboard --max-reports 10
          
          # Clean up
          rm -f generate_trend_chart.py

      # ✅ Prepare GitHub Pages Deployment
      - name: Prepare GitHub Pages Deployment
        run: |
          # Move current report to the main directory
          cp -r ./current/* ./
          
          # Create a link to the history dashboard in the main page
          cat >> ./index.html << 'EOF'
          
          <div style="margin-top: 20px; padding: 10px; background-color: #f8f9fa; border-radius: 5px;">
            <h3>Performance Test History</h3>
            <ul>
              <li><a href="./dashboard/index.html">View Test History Dashboard</a></li>
              <li><a href="./dashboard/trend_chart.html">View Performance Trends</a></li>
              <li><a href="./historical-reports/latest/index.html">View Previous Test Run</a></li>
            </ul>
          </div>
EOF
          
          # Clean up temp checkout
          rm -rf temp-checkout

      # ✅ Deploy to GitHub Pages
      - name: Deploy to GitHub Pages
        uses: JamesIves/github-pages-deploy-action@v4
        with:
          branch: gh-pages                # Target branch for GitHub Pages
          folder: ./                      # Folder containing the HTML reports with history
          token: ${{ secrets.GITHUB_TOKEN }}
          clean: false                    # Don't clean to preserve history
          force: true
          attempt-limit: 3