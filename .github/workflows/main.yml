name: JMeter CI/CD Workflow

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main

jobs:
  # ✅ JMeter Tests
  jmeter-tests:
    runs-on: ubuntu-latest

    steps:
      # ✅ Checkout the repository
      - name: Checkout repository
        uses: actions/checkout@v4

      # ✅ Install JMeter
      - name: Install JMeter
        run: |
          sudo apt update
          sudo apt install -y openjdk-11-jre
          wget https://archive.apache.org/dist/jmeter/binaries/apache-jmeter-5.6.2.tgz
          tar -xvzf apache-jmeter-5.6.2.tgz
          echo "JMETER_HOME=$(pwd)/apache-jmeter-5.6.2" >> $GITHUB_ENV
          echo "$(pwd)/apache-jmeter-5.6.2/bin" >> $GITHUB_PATH

      # ✅ Reload environment variables
      - name: Load environment variables
        run: source $GITHUB_ENV

      # ✅ Verify JMeter installation
      - name: Verify JMeter Installation
        run: |
          jmeter --version

      # ✅ Create report directories
      - name: Create report directories
        run: |
          mkdir -p ./jmeter-pages/reports
          mkdir -p ./jmeter-tests/results
          mkdir -p ./jmeter-pages/history

      # ✅ Download previous results if they exist
      - name: Download previous results
        id: download-previous
        continue-on-error: true  # Continue even if no previous results
        uses: actions/download-artifact@v4
        with:
          name: JMeter-History
          path: ./jmeter-pages/history

      # ✅ Run JMeter Tests
      - name: Run JMeter Tests
        run: |
          jmeter -n \
            -t ./C_1.jmx \
            -l ./jmeter-tests/results/results.jtl \
            -e -o ./jmeter-pages/reports \
            -Jthreads=100 -Jrampup=10 -Jduration=60 -f

      # ✅ Save current test date for historical tracking
      - name: Save test metadata
        run: |
          TEST_DATE=$(date +'%Y-%m-%d_%H-%M-%S')
          echo "TEST_DATE=$TEST_DATE" >> $GITHUB_ENV
          echo "$TEST_DATE" > ./jmeter-tests/results/test_date.txt
          cp ./jmeter-tests/results/results.jtl "./jmeter-pages/history/results_$TEST_DATE.jtl"

      # ✅ Generate historical comparison
      - name: Generate Historical Comparison
        run: |
          mkdir -p ./jmeter-pages/reports/history
          
          # Create historical data JSON
          echo "{" > ./jmeter-pages/reports/history/history.json
          echo "  \"tests\": [" >> ./jmeter-pages/reports/history/history.json
          
          # Process current test results
          CURR_AVG_RT=$(grep "summary =" ./jmeter-tests/results/results.jtl | grep -oP 'average=\K[0-9]+' || echo "0")
          CURR_ERRORS=$(grep "summary =" ./jmeter-tests/results/results.jtl | grep -oP 'Err: *\K[0-9]+' || echo "0")
          CURR_THROUGHPUT=$(grep "summary =" ./jmeter-tests/results/results.jtl | grep -oP 'Throughput=\K[0-9.]+' || echo "0")
          
          # Add current test to JSON
          echo "    {" >> ./jmeter-pages/reports/history/history.json
          echo "      \"date\": \"$TEST_DATE\"," >> ./jmeter-pages/reports/history/history.json
          echo "      \"avgResponseTime\": $CURR_AVG_RT," >> ./jmeter-pages/reports/history/history.json
          echo "      \"errorCount\": $CURR_ERRORS," >> ./jmeter-pages/reports/history/history.json
          echo "      \"throughput\": $CURR_THROUGHPUT," >> ./jmeter-pages/reports/history/history.json
          echo "      \"isCurrent\": true" >> ./jmeter-pages/reports/history/history.json
          echo "    }" >> ./jmeter-pages/reports/history/history.json
          
          # Process historical test results if they exist
          HIST_COUNT=0
          for file in ./jmeter-pages/history/results_*.jtl; do
            if [ -f "$file" ]; then
              TEST_DATE=$(basename "$file" | sed 's/results_\(.*\)\.jtl/\1/')
              HIST_AVG_RT=$(grep "summary =" "$file" | grep -oP 'average=\K[0-9]+' || echo "0")
              HIST_ERRORS=$(grep "summary =" "$file" | grep -oP 'Err: *\K[0-9]+' || echo "0")
              HIST_THROUGHPUT=$(grep "summary =" "$file" | grep -oP 'Throughput=\K[0-9.]+' || echo "0")
              
              echo "," >> ./jmeter-pages/reports/history/history.json
              echo "    {" >> ./jmeter-pages/reports/history/history.json
              echo "      \"date\": \"$TEST_DATE\"," >> ./jmeter-pages/reports/history/history.json
              echo "      \"avgResponseTime\": $HIST_AVG_RT," >> ./jmeter-pages/reports/history/history.json
              echo "      \"errorCount\": $HIST_ERRORS," >> ./jmeter-pages/reports/history/history.json
              echo "      \"throughput\": $HIST_THROUGHPUT," >> ./jmeter-pages/reports/history/history.json
              echo "      \"isCurrent\": false" >> ./jmeter-pages/reports/history/history.json
              echo "    }" >> ./jmeter-pages/reports/history/history.json
              
              HIST_COUNT=$((HIST_COUNT+1))
              # Limit to 10 historical entries
              if [ "$HIST_COUNT" -ge 10 ]; then
                break
              fi
            fi
          done
          
          echo "  ]" >> ./jmeter-pages/reports/history/history.json
          echo "}" >> ./jmeter-pages/reports/history/history.json
          
          # Create historical comparison HTML
          cat > ./jmeter-pages/reports/history/index.html << 'EOL'
          <!DOCTYPE html>
          <html lang="en">
          <head>
            <meta charset="UTF-8">
            <meta name="viewport" content="width=device-width, initial-scale=1.0">
            <title>JMeter Historical Comparison</title>
            <script src="https://cdn.jsdelivr.net/npm/chart.js"></script>
            <style>
              body { font-family: Arial, sans-serif; margin: 20px; }
              .container { max-width: 1200px; margin: 0 auto; }
              .chart-container { height: 400px; margin-bottom: 30px; }
              table { width: 100%; border-collapse: collapse; margin-top: 20px; }
              th, td { padding: 10px; text-align: left; border-bottom: 1px solid #ddd; }
              th { background-color: #f2f2f2; }
              tr.current { background-color: #e6f7ff; font-weight: bold; }
              .header { display: flex; justify-content: space-between; align-items: center; }
              .header a { text-decoration: none; padding: 10px; background: #f2f2f2; border-radius: 4px; }
            </style>
          </head>
          <body>
            <div class="container">
              <div class="header">
                <h1>JMeter Historical Test Comparison</h1>
                <a href="../index.html">Back to Current Report</a>
              </div>
              
              <div class="chart-container">
                <canvas id="responseTimeChart"></canvas>
              </div>
              
              <div class="chart-container">
                <canvas id="throughputChart"></canvas>
              </div>
              
              <div class="chart-container">
                <canvas id="errorChart"></canvas>
              </div>
              
              <h2>Test Results History</h2>
              <table>
                <thead>
                  <tr>
                    <th>Date</th>
                    <th>Avg Response Time (ms)</th>
                    <th>Throughput (req/s)</th>
                    <th>Error Count</th>
                  </tr>
                </thead>
                <tbody id="historyTable">
                  <!-- Data will be loaded from history.json -->
                </tbody>
              </table>
            </div>
            
            <script>
              async function loadData() {
                const response = await fetch('history.json');
                const data = await response.json();
                
                // Sort tests by date (newest first)
                data.tests.sort((a, b) => {
                  if (a.isCurrent) return -1;
                  if (b.isCurrent) return 1;
                  return new Date(b.date) - new Date(a.date);
                });
                
                // Prepare chart data
                const dates = data.tests.map(test => formatDate(test.date));
                const responseTimes = data.tests.map(test => test.avgResponseTime);
                const throughputs = data.tests.map(test => test.throughput);
                const errors = data.tests.map(test => test.errorCount);
                
                // Create charts
                createChart('responseTimeChart', 'Average Response Time (ms)', dates, responseTimes);
                createChart('throughputChart', 'Throughput (req/s)', dates, throughputs);
                createChart('errorChart', 'Error Count', dates, errors);
                
                // Populate table
                const tableBody = document.getElementById('historyTable');
                data.tests.forEach(test => {
                  const row = document.createElement('tr');
                  if (test.isCurrent) {
                    row.className = 'current';
                  }
                  
                  row.innerHTML = `
                    <td>${formatDate(test.date)}</td>
                    <td>${test.avgResponseTime}</td>
                    <td>${test.throughput}</td>
                    <td>${test.errorCount}</td>
                  `;
                  
                  tableBody.appendChild(row);
                });
              }
              
              function formatDate(dateStr) {
                // Convert YYYY-MM-DD_HH-MM-SS to a more readable format
                return dateStr.replace(/_/g, ' ').replace(/-/g, ':');
              }
              
              function createChart(id, label, labels, data) {
                const ctx = document.getElementById(id).getContext('2d');
                
                // Determine if this is the error chart
                const isErrorChart = id === 'errorChart';
                
                new Chart(ctx, {
                  type: 'line',
                  data: {
                    labels: labels,
                    datasets: [{
                      label: label,
                      data: data,
                      backgroundColor: isErrorChart ? 'rgba(255, 99, 132, 0.2)' : 'rgba(54, 162, 235, 0.2)',
                      borderColor: isErrorChart ? 'rgba(255, 99, 132, 1)' : 'rgba(54, 162, 235, 1)',
                      borderWidth: 2,
                      fill: true,
                      tension: 0.1
                    }]
                  },
                  options: {
                    responsive: true,
                    maintainAspectRatio: false,
                    scales: {
                      y: {
                        beginAtZero: true
                      }
                    }
                  }
                });
              }
              
              // Load data when page loads
              window.addEventListener('DOMContentLoaded', loadData);
            </script>
          </body>
          </html>
          EOL

          # Add link to historical data in the main index.html
          sed -i 's#<body>#<body>\n<div style="text-align: center; margin: 20px;"><a href="history/" style="display: inline-block; padding: 10px 20px; background-color: #4CAF50; color: white; text-decoration: none; border-radius: 5px; font-weight: bold;">View Historical Comparison</a></div>#' ./jmeter-pages/reports/index.html

      # ✅ Display Test Summary
      - name: Display Test Summary
        run: |
          echo "Test Summary:"
          grep "summary =" ./jmeter-tests/results/results.jtl || echo "No summary found"

      # ✅ Upload Reports as Artifacts
      - name: Upload JMeter Reports
        uses: actions/upload-artifact@v4
        with:
          name: JMeter-Reports
          path: ./jmeter-pages/reports

      # ✅ Upload Historical Data as Artifacts
      - name: Upload Historical Data
        uses: actions/upload-artifact@v4
        with:
          name: JMeter-History
          path: ./jmeter-pages/history

  # ✅ GitHub Pages Deployment
  deploy:
    needs: jmeter-tests
    runs-on: ubuntu-latest

    steps:
      # ✅ Checkout repository
      - name: Checkout repository
        uses: actions/checkout@v4

      # ✅ Download JMeter Reports Artifact
      - name: Download JMeter Reports
        uses: actions/download-artifact@v4
        with:
          name: JMeter-Reports
          path: ./jmeter-pages/reports

      # ✅ Prepare for GitHub Pages
      - name: Prepare GitHub Pages Structure
        run: |
          # Create public directory
          mkdir -p ./public
          
          # Copy reports to public/reports
          mkdir -p ./public/reports
          cp -r ./jmeter-pages/reports/* ./public/reports/
          
          # Create 404.html in reports directory
          cp ./public/reports/index.html ./public/reports/404.html
          
          # Create an index.html in the root that redirects to reports/
          echo '<!DOCTYPE html>
          <html>
          <head>
            <meta http-equiv="refresh" content="0; url=reports/">
            <title>Redirecting to JMeter Reports</title>
          </head>
          <body>
            <p>If you are not redirected automatically, <a href="reports/">click here</a>.</p>
          </body>
          </html>' > ./public/index.html
          
          # Create top-level 404.html file
          cp ./public/index.html ./public/404.html

      # ✅ Deploy to GitHub Pages
      - name: Deploy to GitHub Pages
        uses: JamesIves/github-pages-deploy-action@v4
        with:
          branch: gh-pages                # Target branch for GitHub Pages
          folder: ./public                # Folder containing the HTML reports
          token: ${{ secrets.GITHUB_TOKEN }}
          clean: true
          force: true
          attempt-limit: 3 
